{"version":3,"sources":["Components/Citations.js","App.js","serviceWorker.js","index.js"],"names":["Citations","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomColor","colors","state","Math","floor","random","length","nextQuote","axios","get","concat","then","response","setState","author","data","citation","infos","personnage","episode","color","catch","error","console","log","react_default","a","createElement","className","onClick","Component","App","Components_Citations","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAyEeA,cApEd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAcPQ,YAAc,WACb,IAAIC,EAASR,EAAKS,MAAMD,OACxB,OAAOA,EAAOE,KAAKC,MAAMD,KAAKE,SAASJ,EAAOK,UAjB5Bb,EAoBnBc,UAAY,WACXC,IAAMC,IAAO,uCAAbC,OAAA,gEAECC,KAAK,SAAAC,GACLnB,EAAKoB,SAAS,CACbC,OAAQF,EAASG,KAAKC,SAASC,MAAMC,WACrCF,SAAUJ,EAASG,KAAKC,SAASA,SACjCG,QAASP,EAASG,KAAKC,SAASC,MAAME,QACtCC,MAAO3B,EAAKO,kBAGbqB,MAAM,SAAAC,GACNC,QAAQC,IAAIF,MA9Bb7B,EAAKS,MAAQ,CACZY,OAAQ,GACRE,SAAU,GACVG,QAAS,GACTlB,OAAQ,CAAC,OAAO,MAAM,YAAY,QAAQ,QAC1CmB,MAAO,IAPU3B,mFAYlBG,KAAKW,6CAyBL,OACCkB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,YAAchC,KAAKM,MAAMkB,OACzCK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCAAd,sBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCAAd,aAAkEhC,KAAKM,MAAMiB,UAE7EM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+DAAf,cAA0FhC,KAAKM,MAAMc,WAErGS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wDAAd,KAAyEhC,KAAKM,MAAMY,OAApF,SAIAW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yCAAyCC,QAASjC,KAAKW,WAAzE,wBA5DqBuB,aCKTC,MANf,WACE,OACEN,EAAAC,EAAAC,cAACK,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.e5f286dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './citations.css';\nimport axios from 'axios';\n\nclass Citations extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tauthor: '',\n\t\t\tcitation: '',\n\t\t\tepisode: '',\n\t\t\tcolors: ['blue','red','blueLight','green','gray'],\n\t\t\tcolor: '',\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.nextQuote()\n\t}\n\n\trandomColor = () => {\n\t\tlet colors = this.state.colors;\n\t\treturn colors[Math.floor(Math.random()*colors.length)];\n\t}\n\n\tnextQuote = () => {\n\t\taxios.get(`${'https://cors-anywhere.herokuapp.com/'}https://kaamelott.chaudie.re/api/random/personnage/Perceval`)\n\n\t\t.then(response => {\n\t\t\tthis.setState({\n\t\t\t\tauthor: response.data.citation.infos.personnage,\n\t\t\t\tcitation: response.data.citation.citation,\n\t\t\t\tepisode: response.data.citation.infos.episode,\n\t\t\t\tcolor: this.randomColor(),\n\t\t\t})\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.log(error);\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className={\"citation \" + this.state.color}>\n\t\t\t<div className=\"columns\">\n\t\t\t<div className=\"column\">\n\t\t\t<h1 className=\"title is-1 has-text-centered\">Random Citations</h1>\n\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"columns is-centered\">\n\t\t\t<div className=\"column is-10 \">\n\t\t\t<div className=\"columns\">\n\t\t\t<h4 className=\"column is-size-4 has-text-weight-bold\">episode : { this.state.episode }</h4>\n\t\t\t</div>\n\t\t\t<div className=\"columns\">\n\t\t\t<div className=\"column has-text-centered is-size-5 is-capitalized is-italic\">citation : { this.state.citation }</div>\n\t\t\t</div>\n\t\t\t<div className=\"columns\">\n\t\t\t<h4 className=\"column has-text-right is-size-4 has-text-weight-bold\">\" { this.state.author } \"</h4>\n\t\t\t</div>\n\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"columns is-centered\">\n\t\t\t<div className=\"column is-1\">\n\t\t\t<button className=\"button is-success is-hovered is-medium\" onClick={this.nextQuote}>Next Quote</button>\n\t\t\t</div>\n\t\t\t</div>\n\t\t\t</div>\n\t\t\t)\n\t}\n\n}\n\nexport default Citations","import React from 'react';\nimport Citations from './Components/Citations.js';\n\nfunction App() {\n  return (\n    <Citations />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}